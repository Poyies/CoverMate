@page
@model CoverMate.Pages.MyRequestsModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
     ViewBag.Title = "My Requests";
}

<div class="d-flex justify-content-between">
     <h4 class="fw-bold">My Requests</h4>
     <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalForm">
          Request for Sub
     </button>
</div>
<br />
<input type="hidden" id="RequestVerificationToken" name="__RequestVerificationToken" value="@Antiforgery.GetAndStoreTokens(HttpContext).RequestToken" />


<div id="RequestList"></div>

<div class="modal fade" id="modalForm" tabindex="-1" aria-labelledby="modalFormLabel" aria-hidden="true">
     <div class="modal-dialog" style="max-width:650px">
          <div class="modal-content">
               <div class="modal-header">
                    <h5 class="modal-title" id="modalFormLabel">Sub Request Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               </div>
               <div class="modal-body bg-light">
                    <form class="d-flex flex-column gap-2">
                         <div class="row align-items-start">
                              <div class="col-3">
                                   <label for="txtDate" class="col-form-label">Date Needed</label>
                              </div>
                              <div class="col-9">
                                   <input id="txtDate" type="date" class="form-control">
                              </div>
                         </div>
                         <div class="row align-items-start">
                              <div class="col-3">
                                   <label for="txtReason" class="col-form-label">Reason for Sub</label>
                              </div>
                              <div class="col-9">
                                   <input id="txtReason" class="form-control" />
                              </div>
                         </div>
                         <div class="row align-items-start">
                              <div class="col-3">
                                   <label for="chkBlock" class="col-form-label">Block</label>
                              </div>
                              <div class="col-9">
                                   <div id="blockList" class="d-flex flex-column gap-1 p-3 bg-white border rounded-3"></div>
                              </div>
                         </div>
                    </form>
               </div>
               <div class="modal-footer justify-content-between align-items-center">
                    <div class="form-check">
                         <input type="checkbox" class="form-check-input" id="termsCheck">
                         <label class="form-check-label" for="termsCheck">I've talked to my PL and Principal about this absence.</label>
                    </div>
                    <div>
                         <button type="button" class="btn" data-bs-dismiss="modal">Close</button>
                         <button type="submit" class="btn btn-primary" id="btnSubmit" onclick="submitSubRequests()" disabled>Submit</button>
                    </div>
               </div>
          </div>
     </div>
</div>


@section Scripts{
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

     <script>
          $(document).ready(function () {
               $('#txtDate').on('change input', function () {
                    const date = $(this).val().trim()
                    if (date) {
                         getBlockList(date)
                    } else {
                         $('#blockList').empty()
                    }
               })
          });

          jQuery(function () {
               getListofRequest()

               // When the consent checkbox is changed
               $('#termsCheck').on('change', updateSubmitButtonState)

               // When any block is checked/unchecked
               $('#blockList').on('change', '.block-check', updateSubmitButtonState)

               $('#modalForm').on('show.bs.modal', function (e) {
                    var modal = $(this)
                    var button = $(e.relatedTarget)

                    const today = new Date().toISOString().split('T')[0]
                    modal.find('#txtDate').val(today)
                    modal.find('#txtDate').attr('min', today)

                    getBlockList($('#txtDate').val())
               }).on('hidden.bs.modal', function (e) {
                    var modal = $(this)

                    $(modal).find('#blockList').empty()
                    $(modal).find('#termsCheck').prop('checked', false)
                    $(modal).find('#btnSubmit').prop('disabled', true)
                    $(modal).find('.block-check').prop('checked', false)
               })

          })

          function getListofRequest() {
               axios.get("/api/MyRequest/GetListofRequest")
                    .then(function (res) {
                         const data = res.data.data
                         const $list = $('#RequestList')
                         $list.empty() // Clear previous content
                         if (data.length > 0) {

                              $.each(data, function (i, item) {
                                   const requestDate = new Date(item.request_date).toLocaleDateString()
                                   const approvedDate = item.approved_date ? new Date(item.approved_date).toLocaleDateString() : '—'
                                   const assignedDate = item.assigned_date ? new Date(item.assigned_date).toLocaleDateString() : '—'

                                   $list.append(`
                                                 <div class="card mb-3">
                                                     <div class="card-body">
                                                         <div class="d-flex justify-content-between align-items-center">
                                                              <div class="d-flex">
                                                                 ${renderCourseWithBlock(item.course_name, item.block)}
                                                              </div>
                                                            <span class="badge alert-${getStatusColor(item.status)} text-capitalize align-self-start">${item.statusDetails}</span>
                                                         </div>
                                                         <small class="text-secondary">${item.day}, ${item.time} - ${item.room}</small>

                                                         <div class="d-flex flex-column gap-1 mt-2 p-2 bg-light rounded-3">
                                                            <span><strong>Request Date:</strong> ${requestDate}</span>
                                                            <span><strong>Sub Plan:</strong> <a href="${item.subplanlink}" target="_blank">${item.subplanlink}</a></span>
                                                            <span><strong>Reason:</strong> ${item.reason}</span>
                                                            <span><strong>Notes:</strong> ${item.notes}</span>
                                                            <span class="d-none"><strong>Approved:</strong> ${approvedDate}</span>
                                                            <span class="d-none"<strong>Assigned:</strong> ${assignedDate}</span>
                                                         </div>


                                                     </div>
                                                 </div>
                                             `)
                              })
                         } else {
                              $list.html('<div class="alert alert-info">No requests found.</div>')
                         }
                    })
                    .catch(function (err) {
                         console.error(err)
                         $('#RequestList').html('<div class="alert alert-danger">Failed to load requests.</div>')
                    })
          }
          //Adding date as parameter
          // keep a reference to the current cancel token source
          let blockListCancelSource = null

          function getBlockList(date) {
               const $blockList = $('#blockList')

               // 1) cancel any previous request
               if (blockListCancelSource) {
                    blockListCancelSource.cancel('New request started')
               }
               blockListCancelSource = axios.CancelToken.source()

               // 2) clear old content
               $blockList.empty()

               // 3) fire the new request with the cancel token
               axios
                    .get(
                         `/api/MyRequest/Getblocklist?targetDate=${encodeURIComponent(date)}`,
                         { cancelToken: blockListCancelSource.token }
                    )
                    .then(response => {
                         if (response.status === 200 && Array.isArray(response.data.data)) {
                              response.data.data.forEach(block => {
                                   const scheduleText = `${block.day}, ${block.time} - ${block.room}`
                                   const displayLabel = `${block.course_name} (${block.block})`

                                   $blockList.append(`
                                     <div class="form-check">
                                       <input class="form-check-input block-check"
                                              type="checkbox"
                                              value="${block.schedule_id}"
                                              id="block-${block.schedule_id}">
                                       <label class="form-check-label"
                                              for="block-${block.schedule_id}">
                                         ${displayLabel}<br>
                                         <small class="text-muted">${scheduleText}</small>
                                       </label>
                                     </div>
                                     <div class="block-details mt-2 ms-4 mb-3"
                                          id="block-${block.schedule_id}-details"
                                          style="display: none;">
                                       <input type="text" class="form-control mb-2" placeholder="Sub Plan Link">
                                       <textarea class="form-control" placeholder="Notes (optional)"></textarea>
                                     </div>
                                   `)
                              })

                              // re‐bind toggle handler once
                              $blockList.off('change', '.block-check')
                                   .on('change', '.block-check', function () {
                                        $(`#block-${this.value}-details`).toggle(this.checked)
                                   })
                         } else {
                              const msg = response.data.message || 'No blocks to display.'
                              $blockList.html(`<div class="text-danger">${msg}</div>`)
                         }
                    })
                    .catch(error => {
                         // ignore cancellations
                         if (axios.isCancel(error)) return

                         // real error → show the server’s message if present
                         let msg = 'Unable to load blocks. Please try again later.'
                         if (error.response?.data?.message) {
                              msg = error.response.data.message
                         }
                         $blockList.html(`<div class="text-danger">${msg}</div>`)
                    })
          }



          function submitSubRequests() {
               const token = document.querySelector('#RequestVerificationToken').value

               const requestDate = $('#txtDate').val()
               const reason = $('#txtReason').val()
               const blocks = $('.block-check:checked')

               if (!requestDate || !reason || blocks.length === 0 || !$('#termsCheck').is(':checked')) {
                    Swal.fire("Please complete all required fields.")
                    return
               }

               Swal.fire({
                    title: 'Submit Request?',
                    text: "Are you sure you want to submit your sub request?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, submit',
                    cancelButtonText: 'Cancel'
               }).then((result) => {
                    if (!result.isConfirmed) return

                    // show loading indicator
                    Swal.fire({
                         title: 'Submitting new request...',
                         allowOutsideClick: false,
                         didOpen: () => Swal.showLoading()
                    })

                    const postRequests = []
                    blocks.each(function () {
                         const scheduleId = $(this).val()
                         const subPlanLink = $(`#block-${scheduleId}-details input`).val()
                         const notes = $(`#block-${scheduleId}-details textarea`).val()

                         const payload = {
                              ScheduleId: parseInt(scheduleId),
                              Subplanlink: subPlanLink,
                              Reason: reason,
                              Notes: notes,
                              RequestDate: requestDate
                         }

                         postRequests.push(
                              axios.post("/api/MyRequest/SetNewRequest", payload, {
                                   headers: { 'RequestVerificationToken': token }
                              })
                                   .then(res => res.data)
                                   .catch(err => ({ statuscode: 400, error: err }))
                         )
                    })

                    Promise.all(postRequests)
                         .then(results => {
                              // hide loader
                              Swal.close()

                              const failed = results.filter(r => r.statuscode !== 200)
                              if (failed.length > 0) {
                                   Swal.fire("Some requests failed.", "Please try again.", "warning")
                              } else {
                                   Swal.fire("Success", "Your request has been submitted.", "success")

                                   // ✅ Clear and refresh the form/modal
                                   $('#modalForm').modal('hide')
                                   $('#btnSubmit').prop('disabled', true)
                                   $('#termsCheck').prop('checked', false)
                                   $('.block-check').prop('checked', false)
                                   $('#txtReason').val('')
                                   $('#txtDate').val(new Date().toISOString().split('T')[0])
                                   $('#blockList').empty()

                                   // ✅ Refresh request list
                                   getListofRequest()
                              }
                         })
                         .catch(err => {
                              // this shouldn't usually fire because we've caught individual errors above,
                              // but just in case:
                              Swal.close()
                              Swal.fire("Error", "An unexpected error occurred.", "error")
                         })
               })
          }



          function updateSubmitButtonState() {
               const isConsentChecked = $('#termsCheck').is(':checked')
               const isAtLeastOneBlockChecked = $('.block-check:checked').length > 0

               $('#btnSubmit').prop('disabled', !(isConsentChecked && isAtLeastOneBlockChecked))
          }

          function getStatusColor(status) {
               switch (status) {
                    case 1: return 'warning' // For Assignment
                    case 2: return 'success' // Approved/Assigned
                    case 3: return 'secondary' // Completed
                    default: return 'dark'
               }
          }

          function renderCourseWithBlock(course, blockName) {
               const blockColors = {
                    "A": "bg-danger",
                    "B": "bg-primary",
                    "C": "bg-success",
                    "D": "bg-warning",
                    "E": "bg-info",
                    "F": "bg-secondary",
                    "G": "bg-dark",
                    "H": "bg-teal", // custom
                    "HR": "bg-pink", // custom
                    "Advisory": "bg-purple", // custom
                    "Lunch": "bg-orange" // custom
               }

               const blockLabel = blockName.replace("Block ", "").trim() // Get just "A", "B", etc.
               const colorClass = blockColors[blockLabel] || 'bg-dark'

               return `
                                      <div class="d-flex align-items-center gap-2">
                                          <h5 class="mb-0">${course}</h5>
                                          <span class="badge ${colorClass} block">${blockLabel}</span>
                                      </div>
                                  `
          }
     </script>


}