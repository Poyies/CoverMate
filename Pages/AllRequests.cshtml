@page
@model AllRequestsModel
@{
     ViewBag.Title = "All Requests";
     Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}


<style>
     i.fal {
          width: 30px;
          text-align: center;
     }

     .block {
          height: 20px;
          width: 20px;
          color: white;
          display: flex;
          justify-content: center;
          align-items: center;
          border-radius: 1rem;
          font-size: 14px;
          font-weight: 500;
     }
</style>

<div id="AllRequests" class=" bg-white list-group"></div>


@section Scripts{
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

     <script>
          $(document).ready(function () {
               getAllRequest()

          })

          function getAllRequest() {
               axios.get("/api/Approval/GetListofRequest")
                    .then(function (res) {
                         const data = res.data.data
                         const $list = $('#AllRequests')
                         $list.empty() // Clear previous content
                         if (data.length > 0) {

                              // Add header
                              var header = `<div class="list-group-item bg-secondary text-white small">
                                   <div class="row align-items-center">
                                        <div class="col-2">
                                             Requestor
                                        </div>
                                        <div class="col-2">
                                             Course/Block
                                        </div>
                                        <div class="col-3">
                                             Schedule
                                        </div>
                                        <div class="col-2">
                                             Reason
                                        </div>
                                        <div class="col-1">
                                             Status
                                        </div>
                                        <div class="col-2">
                                             Substitute
                                        </div>
                                   </div>
                              </div>`

                              $list.append(header)

                              $.each(data, function (i, item) {
                                   const requestDate = new Date(item.request_date).toLocaleDateString()
                                   const approvedDate = item.approved_date ? new Date(item.approved_date).toLocaleDateString() : '—'
                                   const assignedDate = item.assigned_date ? new Date(item.assigned_date).toLocaleDateString() : '—'

                                   const color = getColorClass(item.teacher_name);

                                   $list.append(`
                                             <div class="list-group-item">
                                                 <div class="row align-items-center">
                                                       <div class="col-2">
                                                            <div class="d-flex align-items-center gap-2">
                                                                 <div style="height:30px;width:30px;" class="fw-bold ${color} d-flex justify-content-center text-center align-items-center rounded-circle">
                                                                      <span class="fa fa-user"></span>
                                                                 </div>
                                                                 <span>${item.teacher_name}</span>
                                                            </div>
                                                       </div>
                                                       <div class="col-2">
                                                            <div class="d-flex align-items-center gap-2">
                                                                 ${renderCourseWithBlock(item.block)}
                                                                 <span>${item.course_name}</span>
                                                            </div>
                                                       </div>
                                                       <div class="col-3">
                                                            ${item.day}, ${item.time} - ${item.room}
                                                       </div>
                                                       <div class="col-2">
                                                            ${item.reason}
                                                       </div>
                                                       <div class="col-1">
                                                            <span class="badge alert-${getStatusColor(item.status)} text-capitalize align-self-start">${item.statusDetails}</span>
                                                       </div>
                                                       <div class="col-2">
                                                            ${
                                                                 item.status === 1
                                                                      ? `<select name="subList" class="form-select"></select>`
                                                                      : `<div class="d-flex align-items-center gap-2">
                                                                           <div style="height:30px;width:30px;" class="fw-bold ${color} d-flex justify-content-center text-center align-items-center rounded-circle">${item.teacher_name.charAt(0)}</div>
                                                                           <span>${item.substitute_name}</span>
                                                                      </div>`
                                                             }
                                                       </div>
                                                 </div>
                                             </div>
                                         `)
                              })

                              getSubList()
                         } else {
                              $list.html('<div class="alert alert-info">No requests found.</div>')
                         }
                    })
                    .catch(function (err) {
                         console.error(err)
                         $('#AllRequests').html('<div class="alert alert-danger">Failed to load requests.</div>')
                    })
          }

          function getSubList() {
               axios.get("/api/Approval/GetListofSubs")
                    .then(function (res) {
                         const subs = res.data.data

                         if (subs && subs.length > 0) {
                              // Group substitutes by ID so names aren't duplicated for each course
                              const grouped = {}

                              subs.forEach(sub => {
                                   const id = sub.substitute_id
                                   const name = sub.substitute_name
                                   const course = sub.course_name

                                   if (!grouped[id]) {
                                        grouped[id] = {
                                             name: name,
                                             courses: [course]
                                        }
                                   } else {
                                        grouped[id].courses.push(course)
                                   }
                              })

                              // Populate each subList <select> in the DOM
                              $('select[name="subList"]').each(function () {
                                   const $select = $(this)
                                   $select.empty()
                                   $select.append(`<option value="">--Select Substitute--</option>`)

                                   Object.entries(grouped).forEach(([id, sub]) => {
                                        const courseList = sub.courses.join(", ")
                                        $select.append(`<option value="${id}" data-name="${sub.name}">${sub.name} (${courseList})</option>`)
                                   })
                              });
                         } else {
                              console.warn("No active substitutes found.")
                         }
                    }).then(function () {
                         $('select[name="subList"]').off('change').on('change', function () {
                              const selectedId = $(this).val()
                              const selectedName = $(this).find(':selected').data('name')

                              if (selectedId !== "") {
                                   Swal.fire({
                                        title: 'Assign Substitute?',
                                        text: `Do you want to assign to ${selectedName}?`,
                                        icon: 'question',
                                        showCancelButton: true,
                                        confirmButtonText: 'Yes, assign',
                                        cancelButtonText: 'Cancel'
                                   }).then((result) => {
                                        if (result.isConfirmed) {
                                             // 🔥 Call assignment API or action here later
                                             console.log(`Assigning sub ID ${selectedId} to request...`)

                                             // TODO: You can make an axios.post here
                                        } else {
                                             // Optional: reset select if cancelled
                                             $(this).val('')
                                        }
                                   })
                              }
                         });
                    })
                    .catch(function (err) {
                         console.error("Error fetching substitutes:", err)
                    })
          }

          function getStatusColor(status) {
               switch (status) {
                    case 1: return 'warning' // For Assignment
                    case 2: return 'success' // Approved/Assigned
                    case 3: return 'secondary' // Completed
                    default: return 'dark'
               }
          }

          const colorClasses = [
               'alert-primary',
               'alert-secondary',
               'alert-success',
               'alert-danger',
               'alert-warning',
               'alert-info',
               'alert-dark'
          ];
          function getColorClass(name) {
               let hash = 0
               for (let i = 0; i < name.length; i++) {
                    hash = name.charCodeAt(i) + ((hash << 5) - hash)
               }
               const index = Math.abs(hash) % colorClasses.length
               return colorClasses[index]
          }

          function renderCourseWithBlock(blockName) {
               const blockColors = {
                    "A": "bg-danger",
                    "B": "bg-primary",
                    "C": "bg-success",
                    "D": "bg-warning",
                    "E": "bg-info",
                    "F": "bg-secondary",
                    "G": "bg-dark",
                    "H": "bg-teal",
                    "HR": "bg-pink",
                    "Advisory": "bg-warning",
                    "Lunch": "bg-orange"
               }

               const blockLabel = typeof blockName === 'string' && blockName
                    ? blockName.replace("Block ", "").trim()
                    : "N/A"

               const colorClass = blockColors[blockLabel] || 'bg-dark'

               // 👨🏻‍💼 for Advisory, 🏫 for HR, 🍽️ for Lunch
               const emojiLabel = blockLabel === "Advisory" ? "👨🏻‍💼"
                    : blockLabel === "HR" ? "🏫"
                         : blockLabel === "Lunch" ? "🍽️"
                              : blockLabel

               return `<span class="badge ${colorClass} block">${emojiLabel}</span>`
          }

     </script>
}